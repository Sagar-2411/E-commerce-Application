package com.BikkadIt.ElectronicStoreNew.Controller;

import com.BikkadIt.ElectronicStoreNew.Dto.UserDto;
import com.BikkadIt.ElectronicStoreNew.entity.User;
import com.BikkadIt.ElectronicStoreNew.payload.UserResponse;
import com.BikkadIt.ElectronicStoreNew.service.serviceI.UserServiceI;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.util.ArrayList;
import java.util.Arrays;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class UserControllerTest {

    @MockBean
    private UserServiceI userServiceI;

    private User user;

    @Autowired
    private ModelMapper modelMapper;

    @Autowired
    private MockMvc mockMvc;  //this mockMvc require to perform url methods

    @BeforeEach           //it is user for before excuting each method
    public void init() {
        user = User.builder()
                .name("Raut")
                .email("Srdff33@gami.com")
                .gender("male")
                .password("Sfd@77564")
                .imageName("jpag")
                .about("this is sagar")
                .build();
    }

    @Test
    public void createUserTest() throws Exception {

        UserDto userDto = modelMapper.map(user, UserDto.class);

        Mockito.when(userServiceI.createUser(Mockito.any())).thenReturn(userDto);

        this.mockMvc.perform(MockMvcRequestBuilders.post("/api/user")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(convetObjectToJsonString(user))
                        .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.name").exists());  //we get json data in that data we check name is containt
    }


    private String convetObjectToJsonString(Object user) {
        try {
            return new ObjectMapper().writeValueAsString(user);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }

//this method we created explicitally this method conver user date to json string
    }

    @Test
    public void updateUserTest() throws Exception {

        String userId = "123";
        UserDto userDto = modelMapper.map(user, UserDto.class);
        UserDto userDto1 = UserDto.builder()
                .name("VILAS")
                .email("Srdff33@gami.com")
                .gender("male")
                .password("Sfd@77564")
                .imageName("jpag")
                .about("this is sagar")
                .build();
        Mockito.when(userServiceI.updateUser(Mockito.any(), Mockito.anyString())).thenReturn(userDto);

        ResultActions $name = this.mockMvc.perform(MockMvcRequestBuilders.put("/api/" + userId)
                        //.header(HttpHeaders.AUTHORIZATION,"Bearer here pesr tocken that is generated by postman")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(convetObjectToJsonString(userDto1))
                        .accept(MediaType.APPLICATION_JSON))

                .andDo(print())
                .andExpect(status().isOk());

        //.andExpect(jsonPath("$name").exists());

    }

    @Test
    public void GetAllUserTest() throws Exception {
        UserDto userDto1 = UserDto.builder()
                .name("VILAS")
                .email("Srdff33@gami.com")
                .gender("male")
                .password("Sfd@77564")
                .imageName("jpag")
                .about("this is sagar")
                .build();
        UserDto userDto2 = UserDto.builder()
                .name("amit")
                .email("Srdff33@gami.com")
                .gender("male")
                .password("Sfd@77564")
                .imageName("jpag")
                .about("this is sagar")
                .build();
        UserDto userDto3 = UserDto.builder()
                .name("sumit")
                .email("Srdff33@gami.com")
                .gender("male")
                .password("Sfd@77564")
                .imageName("jpag")
                .about("this is sagar")
                .build();

        UserResponse<UserDto> userResponse = new UserResponse();

        userResponse.setPageSize(10);
        userResponse.setPageNumber(2);
        userResponse.setTotalElements(1000);
        userResponse.setIsLast(false);

        Mockito.when(userServiceI.gellAllUser(Mockito.anyInt(), Mockito.anyInt(), Mockito.anyString(), Mockito.anyString())).thenReturn(userResponse);

        this.mockMvc.perform(MockMvcRequestBuilders.get("/api/")


                        .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isOk());

    }

    @Test
    public void getSingleUser() throws Exception {
        String userId = "123";
        UserDto userDto = modelMapper.map(user, UserDto.class);

        Mockito.when(userServiceI.getUserById(Mockito.anyString())).thenReturn(userDto);

        this.mockMvc.perform(MockMvcRequestBuilders.get("/api/" + userId)
                        .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isOk());

    }

    @Test
    public void searchByUserNameTest() throws Exception {

        UserDto userDto = modelMapper.map(user, UserDto.class);
        Mockito.when(userServiceI.searchUser(Mockito.any())).thenReturn(userDto);

        String keyword = "sagar";
        this.mockMvc.perform(MockMvcRequestBuilders.get("/api/name/" + keyword)
                        .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isFound());

    }

    @Test
    public void deleteUserTest() throws Exception {

        String userId = "123";
        Mockito.doNothing().when(userServiceI).deleteUser(userId);

        this.mockMvc.perform(MockMvcRequestBuilders.delete("/api/" +userId))
                .andDo(print())
                .andExpect(status().isOk());

    }


}


